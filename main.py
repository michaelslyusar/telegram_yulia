# -*- coding: utf-8 -*-
import types
import math
import json
import datetime
import time
import telebot
from dotenv import load_dotenv
import os
import sqlite3
from telebot import types
import random

load_dotenv()

bot = telebot.TeleBot(os.getenv('TOKEN'))


@bot.message_handler(commands=['start'])
def start(message):
    conn = sqlite3.connect('mysticism.db')
    cur = conn.cursor()
    try:
        cur.execute(
            'CREATE TABLE IF NOT EXISTS users(user_id varchar(50) PRIMARY KEY,last_affirmation date,last_zodiac date, last_tarot_read date)')
        cur.execute('INSERT INTO users(user_id) VALUES(:user_id)', {'user_id': message.chat.id})
    except Exception as e:
        print('Something went wrong when initializing DB or user')
        print(e)
    conn.commit()
    cur.close()
    conn.close()

    file = open('img/slide2.jpg', 'rb')
    bot.send_photo(message.chat.id, file)

    markup = types.InlineKeyboardMarkup()
    btn_tarot = types.InlineKeyboardButton('–ö–∞—Ä—Ç–∞ –¥–Ω—è', callback_data='Card')
    btn_horoscope = types.InlineKeyboardButton('–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ 2024', callback_data='ZodiacSelection')
    btn_affirmation = types.InlineKeyboardButton('–ê—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è –¥–Ω—è', callback_data='Affirmation')

    markup.row(btn_tarot)
    markup.row(btn_horoscope, btn_affirmation)

    text = """–ú—É–¥—Ä—ã–π –º–∞–≥ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –ø—É—Ç—å:

–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ä—Ç—É –¥–Ω—è –∏ —É–∑–Ω–∞–π—Ç–µ, —á—Ç–æ –∂–¥—ë—Ç –≤–∞—Å –≤–ø–µ—Ä–µ–¥–∏
üîÆ /card

–∑–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –∑–≤—ë–∑–¥—ã –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –≤–∞—à–µ–º—É –≥–æ—Ä–æ—Å–∫–æ–ø—É
üí´ /zodiac

–∏–ª–∏ –Ω–∞–ø–∏—Ç–∞–π—Ç–µ —Å–≤–æ–π –¥—É—Ö –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–µ–π –¥–Ω—è üíó /affirmation

–ö–∞–∂–¥—ã–π –≤—ã–±–æ—Ä –æ—Ç–∫—Ä–æ–µ—Ç –≤–∞–º –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –º—É–¥—Ä–æ—Å—Ç–∏ –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è. –ö–∞–∫–æ–π –ø—É—Ç—å –≤—ã –ø—Ä–µ–¥–ø–æ—á—Ç—ë—Ç–µ —Å–µ–≥–æ–¥–Ω—è?"""
    bot.send_message(message.chat.id, text, reply_markup=markup)


@bot.message_handler(commands=['card'])
def card(message):
    text = '–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω... –ö–∞—Ä—Ç–∞ –¥–Ω—è –æ—Ç–∫—Ä–æ–µ—Ç –≤–∞–º –∑–∞–≤–µ—Å—É –±—É–¥—É—â–µ–≥–æ –∏ –ø–æ–∫–∞–∂–µ—Ç, –∫–∞–∫–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –∏ —Å–æ–±—ã—Ç–∏—è –∂–¥—É—Ç –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è. –ü–æ–∑–≤–æ–ª—å—Ç–µ –º–∞–≥—É —Ä–∞—Å–∫—Ä—ã—Ç—å –ø–µ—Ä–µ–¥ –≤–∞–º–∏ —Ç–∞–π–Ω—ã —ç—Ç–æ–≥–æ –¥–Ω—è –∏ –ø–æ–ª—É—á–∏—Ç—å –≤–∞–∂–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ.'

    file = open('./img/slide3.jpg', 'rb')
    bot.send_photo(message.chat.id, file)

    btn = types.InlineKeyboardButton('–≤—ã–±—Ä–∞—Ç—å', callback_data='CardReveal')
    markup = types.InlineKeyboardMarkup()
    markup.add(btn)
    bot.send_message(message.chat.id, text, reply_markup=markup)


@bot.message_handler(commands=['zodiac'])
def zodiac(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('\u2651–ö–æ–∑–µ—Ä–æ–≥', callback_data='Zodiac')
    btn2 = types.InlineKeyboardButton('\u2652–í–æ–¥–æ–ª–µ–π', callback_data='Zodiac')
    btn3 = types.InlineKeyboardButton('\u2653–†—ã–±—ã', callback_data='Zodiac')
    btn4 = types.InlineKeyboardButton('\u2648–û–≤–µ–Ω', callback_data='Zodiac')
    btn5 = types.InlineKeyboardButton('\u2649–¢–µ–ª–µ—Ü', callback_data='Zodiac')
    btn6 = types.InlineKeyboardButton('\u264A–ë–ª–∏–∑–Ω–µ—Ü—ã', callback_data='Zodiac')
    btn7 = types.InlineKeyboardButton('\u264B–†–∞–∫', callback_data='Zodiac')
    btn8 = types.InlineKeyboardButton('\u264C–õ–µ–≤', callback_data='Zodiac')
    btn9 = types.InlineKeyboardButton('\u264D–î–µ–≤–∞', callback_data='Zodiac')
    btn10 = types.InlineKeyboardButton('\u264E–í–µ—Å—ã', callback_data='Zodiac')
    btn11 = types.InlineKeyboardButton('\u264F–°–∫–æ—Ä–ø–∏–æ–Ω', callback_data='Zodiac')
    btn12 = types.InlineKeyboardButton('\u2650–°—Ç—Ä–µ–ª–µ—Ü', callback_data='Zodiac')

    markup.row(btn1, btn2, btn3)
    markup.row(btn4, btn5, btn6)
    markup.row(btn7, btn8, btn9)
    markup.row(btn10, btn11, btn12)

    text = '–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω... –ó–≤–µ–∑–¥—ã –≥–æ—Ç–æ–≤—ã —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –≤–∞–º –æ —Ç–æ–º, —á—Ç–æ –æ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –í–∞—Å –≤ —ç—Ç–æ–º –≥–æ–¥—É.'
    bot.send_message(message.chat.id, text, reply_markup=markup)


@bot.message_handler(commands=['affirmation'])
def affirmation(message):
    try:
        daily_access = check_last_affirmation(message.chat.id)
        if daily_access:
            markup = types.InlineKeyboardMarkup()
            btn_tarot = types.InlineKeyboardButton('–ö–∞—Ä—Ç–∞ –¥–Ω—è', callback_data='Card')
            btn_horoscope = types.InlineKeyboardButton('–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ 2024', callback_data='ZodiacSelection')
            markup.row(btn_tarot, btn_horoscope)

            file = open('./img/affirmation.jpg', 'rb')
            bot.send_photo(message.chat.id, file)
            file.close()

            text = '–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω... –ú—É–¥—Ä—ã–π –º–∞–≥ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –¥–ª—è –≤–∞—Å –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞–ø–æ–ª–Ω–∏—Ç –≤–∞—à –¥–µ–Ω—å –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º. –ü–æ–≤—Ç–æ—Ä—è–π—Ç–µ –µ—ë, —á—Ç–æ–±—ã —É–∫—Ä–µ–ø–∏—Ç—å —Å–≤–æ–π –¥—É—Ö –∏ –¥–æ—Å—Ç–∏—á—å –≥–∞—Ä–º–æ–Ω–∏–∏:'

            f = open('db.json', encoding="utf8")
            data = json.load(f)
            random_affirmation = random.randrange(1, len(data["Affirmations"]), 1)
            bot.send_message(message.chat.id,
                             text + "\n\n" + data["Affirmations"][random_affirmation]["text"],
                             parse_mode='HTML', reply_markup=markup)
            f.close()

            user_id = message.chat.id
            try:
                set_affirmation_date(user_id)
            except:
                print('something went wrong when updating affirmations in db')

            markup = types.ReplyKeyboardMarkup()
            btn_tarot = types.InlineKeyboardButton('–ö–∞—Ä—Ç–∞ –¥–Ω—è', callback_data='Card')
            btn_horoscope = types.InlineKeyboardButton('–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ 2024', callback_data='ZodiacSelection')
            markup.row(btn_tarot, btn_horoscope)
        else:
            # Affirmation access denied
            # Image
            file = open('./img/affirmation_denied.jpg', 'rb')
            bot.send_photo(message.chat.id, file)
            file.close()
            # Buttons
            markup = types.InlineKeyboardMarkup()
            btn_horoscope = types.InlineKeyboardButton('–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ 2024', callback_data='ZodiacSelection')
            btn_tarot = types.InlineKeyboardButton('–ö–∞—Ä—Ç–∞ –¥–Ω—è', callback_data='Card')
            markup.row(btn_horoscope, btn_tarot)
            # Text
            text = '<b>–ú—É–¥—Ä—ã–π –º–∞–≥ –≥–ª—è–¥–∏—Ç –Ω–∞ –≤–∞—Å —Å –ø–æ–Ω–∏–º–∞—é—â–µ–π —É–ª—ã–±–∫–æ–π –∏ –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç:</b>\n¬´–°–µ–≥–æ–¥–Ω—è –≤–∞—à–∞ –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞. –°–ª–æ–≤–∞ –º—É–¥—Ä–æ—Å—Ç–∏ –∏ —Å–∏–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ–ª—É—á–∏–ª–∏, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—Å –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—ã–±–æ—Ä –Ω–µ–ª—å–∑—è, –≤–µ–¥—å –∫–∞–∂–¥–∞—è –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è –Ω–µ—Å–µ—Ç —Å–≤–æ—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é –∏ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞, –∏ —Å—É–¥—å–±–∞ –æ—Ç–∫—Ä–æ–µ—Ç –ø–µ—Ä–µ–¥ –≤–∞–º–∏ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è.¬ª'
            bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode='HTML')
    except:
        print('something went wrong when checking last affirmation')


@bot.callback_query_handler(func=lambda call: True)
def callback_message(callback):
    if callback.data == 'Card':
        text = '–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω... –ö–∞—Ä—Ç–∞ –¥–Ω—è –æ—Ç–∫—Ä–æ–µ—Ç –≤–∞–º –∑–∞–≤–µ—Å—É –±—É–¥—É—â–µ–≥–æ –∏ –ø–æ–∫–∞–∂–µ—Ç, –∫–∞–∫–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –∏ —Å–æ–±—ã—Ç–∏—è –∂–¥—É—Ç –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è. –ü–æ–∑–≤–æ–ª—å—Ç–µ –º–∞–≥—É —Ä–∞—Å–∫—Ä—ã—Ç—å –ø–µ—Ä–µ–¥ –≤–∞–º–∏ —Ç–∞–π–Ω—ã —ç—Ç–æ–≥–æ –¥–Ω—è –∏ –ø–æ–ª—É—á–∏—Ç—å –≤–∞–∂–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ.'

        file = open('./img/slide3.jpg', 'rb')
        bot.send_photo(callback.message.chat.id, file)

        btn = types.InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å', callback_data='CardReveal')
        markup = types.InlineKeyboardMarkup()
        markup.add(btn)

        bot.send_message(callback.message.chat.id, text, reply_markup=markup)

    elif callback.data == 'CardReveal':
        try:
            daily_access = check_last_tarot_read(callback.message.chat.id)
            if daily_access:
                # Picking random card from card list
                f = open('db.json', encoding="utf8")
                data = json.load(f)
                random_card = random.randrange(1, len(data["cards"]), 1)
                f.close()

                # Gui
                # Image
                file = open('./img/' + data['cards'][random_card]['name'] + '.jpg', 'rb')
                bot.send_photo(callback.message.chat.id, file)
                file.close()
                # Buttons
                markup = types.InlineKeyboardMarkup()
                btn_horoscope = types.InlineKeyboardButton('–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ 2024', callback_data='ZodiacSelection')
                btn_affirmation = types.InlineKeyboardButton('–ê—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è –¥–Ω—è', callback_data='Affirmation')
                markup.row(btn_affirmation, btn_horoscope)
                bot.send_message(callback.message.chat.id, data['cards'][random_card]['description'],
                                 reply_markup=markup)

                # Updating date of last tarot
                user_id = callback.message.chat.id
                try:
                    set_tarot_read_date(user_id)
                except:
                    print('something went wrong when updating last tarot read in db')
            else:
                # Card Access Denies
                # Image
                file = open('./img/card_denied.jpg', 'rb')
                bot.send_photo(callback.message.chat.id, file)
                file.close()
                # Buttons
                markup = types.InlineKeyboardMarkup()
                btn_horoscope = types.InlineKeyboardButton('–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ 2024', callback_data='ZodiacSelection')
                btn_affirmation = types.InlineKeyboardButton('–ê—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è –¥–Ω—è', callback_data='Affirmation')
                markup.row(btn_horoscope,btn_affirmation)
                # Text
                text ='<b>–ú—É–¥—Ä—ã–π –º–∞–≥ –≥–ª—è–¥–∏—Ç –Ω–∞ –≤–∞—Å —Å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∏ –≥–æ–≤–æ—Ä–∏—Ç:</b>\n¬´–°–µ–≥–æ–¥–Ω—è –≤–∞—à –≤—ã–±–æ—Ä —É–∂–µ —Å–¥–µ–ª–∞–Ω. –°—É–¥—å–±–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É–ª–∞—Å—å –ø–µ—Ä–µ–¥ –≤–∞–º–∏, –∏ –µ—ë —Ç–∞–π–Ω—ã —Ä–∞—Å–∫—Ä—ã–ª–∏—Å—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—ã–±–æ—Ä –Ω–µ–ª—å–∑—è, –≤–µ–¥—å –º—É–¥—Ä–æ—Å—Ç—å –ø—Ä–∏—Ö–æ–¥–∏—Ç –ª–∏—à—å —Ç–µ–º, –∫—Ç–æ —É–º–µ–µ—Ç –∂–¥–∞—Ç—å. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞, –∫–æ–≥–¥–∞ –∑–≤–µ–∑–¥—ã –≤–Ω–æ–≤—å –±—É–¥—É—Ç –±–ª–∞–≥–æ—Å–∫–ª–æ–Ω–Ω—ã –∫ –≤–∞–º.¬ª'
                bot.send_message(callback.message.chat.id, text, reply_markup=markup,parse_mode='HTML')
                print('tarot access denied')
        except:
            print('Something went wrong while checking for last tarot read')

    elif callback.data == 'ZodiacSelection':
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('\u2651–ö–æ–∑–µ—Ä–æ–≥', callback_data='–ì–æ—Ä–æ—Å–∫–æ–ø_–ö–æ–∑–µ—Ä–æ–≥')
        btn2 = types.InlineKeyboardButton('\u2652–í–æ–¥–æ–ª–µ–π', callback_data='–ì–æ—Ä–æ—Å–∫–æ–ø_–í–æ–¥–æ–ª–µ–π')
        btn3 = types.InlineKeyboardButton('\u2653–†—ã–±—ã', callback_data='–ì–æ—Ä–æ—Å–∫–æ–ø_–†—ã–±—ã')
        btn4 = types.InlineKeyboardButton('\u2648–û–≤–µ–Ω', callback_data='–ì–æ—Ä–æ—Å–∫–æ–ø_–û–≤–µ–Ω')
        btn5 = types.InlineKeyboardButton('\u2649–¢–µ–ª–µ—Ü', callback_data='–ì–æ—Ä–æ—Å–∫–æ–ø_–¢–µ–ª–µ—Ü')
        btn6 = types.InlineKeyboardButton('\u264A–ë–ª–∏–∑–Ω–µ—Ü—ã', callback_data='–ì–æ—Ä–æ—Å–∫–æ–ø_–ë–ª–∏–∑–Ω–µ—Ü—ã')
        btn7 = types.InlineKeyboardButton('\u264B–†–∞–∫', callback_data='–ì–æ—Ä–æ—Å–∫–æ–ø_–†–∞–∫')
        btn8 = types.InlineKeyboardButton('\u264C–õ–µ–≤', callback_data='–ì–æ—Ä–æ—Å–∫–æ–ø_–õ–µ–≤')
        btn9 = types.InlineKeyboardButton('\u264D–î–µ–≤–∞', callback_data='–ì–æ—Ä–æ—Å–∫–æ–ø_–î–µ–≤–∞')
        btn10 = types.InlineKeyboardButton('\u264E–í–µ—Å—ã', callback_data='–ì–æ—Ä–æ—Å–∫–æ–ø_–í–µ—Å—ã')
        btn11 = types.InlineKeyboardButton('\u264F–°–∫–æ—Ä–ø–∏–æ–Ω', callback_data='–ì–æ—Ä–æ—Å–∫–æ–ø_–°–∫–æ—Ä–ø–∏–æ–Ω')
        btn12 = types.InlineKeyboardButton('\u2650–°—Ç—Ä–µ–ª–µ—Ü', callback_data='–ì–æ—Ä–æ—Å–∫–æ–ø_–°—Ç—Ä–µ–ª–µ—Ü')

        markup.row(btn1, btn2, btn3)
        markup.row(btn4, btn5, btn6)
        markup.row(btn7, btn8, btn9)
        markup.row(btn10, btn11, btn12)

        text = '–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω... –ó–≤–µ–∑–¥—ã –≥–æ—Ç–æ–≤—ã —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –≤–∞–º –æ —Ç–æ–º, —á—Ç–æ –æ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –í–∞—Å –≤ —ç—Ç–æ–º –≥–æ–¥—É.'
        bot.send_message(callback.message.chat.id, text, reply_markup=markup)

    elif callback.data == 'Affirmation':
        try:
            daily_access = check_last_affirmation(callback.message.chat.id)
            print(daily_access)
            if daily_access:
                print('if')
                markup = types.InlineKeyboardMarkup()
                btn_tarot = types.InlineKeyboardButton('–ö–∞—Ä—Ç–∞ –¥–Ω—è', callback_data='Card')
                btn_horoscope = types.InlineKeyboardButton('–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ 2024', callback_data='ZodiacSelection')
                markup.row(btn_tarot, btn_horoscope)

                file = open('./img/affirmation.jpg', 'rb')
                bot.send_photo(callback.message.chat.id, file)
                file.close()

                text = '–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω... –ú—É–¥—Ä—ã–π –º–∞–≥ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –¥–ª—è –≤–∞—Å –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞–ø–æ–ª–Ω–∏—Ç –≤–∞—à –¥–µ–Ω—å –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º. –ü–æ–≤—Ç–æ—Ä—è–π—Ç–µ –µ—ë, —á—Ç–æ–±—ã —É–∫—Ä–µ–ø–∏—Ç—å —Å–≤–æ–π –¥—É—Ö –∏ –¥–æ—Å—Ç–∏—á—å –≥–∞—Ä–º–æ–Ω–∏–∏:'

                f = open('db.json', encoding="utf8")
                data = json.load(f)
                random_affirmation = random.randrange(1, len(data["Affirmations"]), 1)
                print(callback.message)
                bot.send_message(callback.message.chat.id,
                                 text + "\n\n" + data["Affirmations"][random_affirmation]["text"],
                                 parse_mode='HTML', reply_markup=markup)
                f.close()

                user_id = callback.message.chat.id
                try:
                    set_affirmation_date(user_id)
                except:
                    print('something went wrong when updating affirmations in db')

                markup = types.ReplyKeyboardMarkup()
                btn_tarot = types.InlineKeyboardButton('–ö–∞—Ä—Ç–∞ –¥–Ω—è', callback_data='Card')
                btn_horoscope = types.InlineKeyboardButton('–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ 2024', callback_data='ZodiacSelection')
                markup.row(btn_tarot, btn_horoscope)
            else:
                # Affirmation access denied
                # Image
                file = open('./img/affirmation_denied.jpg', 'rb')
                bot.send_photo(callback.message.chat.id, file)
                file.close()
                # Buttons
                markup = types.InlineKeyboardMarkup()
                btn_horoscope = types.InlineKeyboardButton('–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ 2024', callback_data='ZodiacSelection')
                btn_tarot = types.InlineKeyboardButton('–ö–∞—Ä—Ç–∞ –¥–Ω—è', callback_data='Card')
                markup.row(btn_horoscope, btn_tarot)
                # Text
                text = '<b>–ú—É–¥—Ä—ã–π –º–∞–≥ –≥–ª—è–¥–∏—Ç –Ω–∞ –≤–∞—Å —Å –ø–æ–Ω–∏–º–∞—é—â–µ–π —É–ª—ã–±–∫–æ–π –∏ –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç:</b>\n¬´–°–µ–≥–æ–¥–Ω—è –≤–∞—à–∞ –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞. –°–ª–æ–≤–∞ –º—É–¥—Ä–æ—Å—Ç–∏ –∏ —Å–∏–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ–ª—É—á–∏–ª–∏, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—Å –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—ã–±–æ—Ä –Ω–µ–ª—å–∑—è, –≤–µ–¥—å –∫–∞–∂–¥–∞—è –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è –Ω–µ—Å–µ—Ç —Å–≤–æ—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é –∏ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞, –∏ —Å—É–¥—å–±–∞ –æ—Ç–∫—Ä–æ–µ—Ç –ø–µ—Ä–µ–¥ –≤–∞–º–∏ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è.¬ª'
                bot.send_message(callback.message.chat.id, text, reply_markup=markup, parse_mode='HTML')
        except:
            print('something went wrong when checking last affirmation')

    elif callback.data == '–ì–æ—Ä–æ—Å–∫–æ–ø_–ö–æ–∑–µ—Ä–æ–≥':
        horoscope('–ö–æ–∑–µ—Ä–æ–≥', callback.message)

    elif callback.data == '–ì–æ—Ä–æ—Å–∫–æ–ø_–í–æ–¥–æ–ª–µ–π':
        horoscope('–í–æ–¥–æ–ª–µ–π', callback.message)

    elif callback.data == '–ì–æ—Ä–æ—Å–∫–æ–ø_–†—ã–±—ã':
        horoscope('–†—ã–±—ã', callback.message)

    elif callback.data == '–ì–æ—Ä–æ—Å–∫–æ–ø_–û–≤–µ–Ω':
        horoscope('–û–≤–µ–Ω', callback.message)

    elif callback.data == '–ì–æ—Ä–æ—Å–∫–æ–ø_–¢–µ–ª–µ—Ü':
        horoscope('–¢–µ–ª–µ—Ü', callback.message)

    elif callback.data == '–ì–æ—Ä–æ—Å–∫–æ–ø_–ë–ª–∏–∑–Ω–µ—Ü—ã':
        horoscope('–ë–ª–∏–∑–Ω–µ—Ü—ã', callback.message)

    elif callback.data == '–ì–æ—Ä–æ—Å–∫–æ–ø_–†–∞–∫':
        horoscope('–†–∞–∫', callback.message)

    elif callback.data == '–ì–æ—Ä–æ—Å–∫–æ–ø_–õ–µ–≤':
        horoscope('–õ–µ–≤', callback.message)

    elif callback.data == '–ì–æ—Ä–æ—Å–∫–æ–ø_–î–µ–≤–∞':
        horoscope('–î–µ–≤–∞', callback.message)

    elif callback.data == '–ì–æ—Ä–æ—Å–∫–æ–ø_–í–µ—Å—ã':
        horoscope('–í–µ—Å—ã', callback.message)

    elif callback.data == '–ì–æ—Ä–æ—Å–∫–æ–ø_–°–∫–æ—Ä–ø–∏–æ–Ω':
        horoscope('–°–∫–æ—Ä–ø–∏–æ–Ω', callback.message)

    elif callback.data == '–ì–æ—Ä–æ—Å–∫–æ–ø_–°—Ç—Ä–µ–ª–µ—Ü':
        horoscope('–°—Ç—Ä–µ–ª–µ—Ü', callback.message)


def set_affirmation_date(user_id):
    conn = sqlite3.connect('mysticism.db')
    cur = conn.cursor()
    try:
        cur.execute('UPDATE users SET last_affirmation = :time WHERE user_id = :user_id',
                    {'user_id': user_id, 'time': time.time()})
    except Exception as e:
        print(e)
    conn.commit()
    cur.close()
    conn.close()


def set_tarot_read_date(user_id):
    conn = sqlite3.connect('mysticism.db')
    cur = conn.cursor()
    try:
        cur.execute('UPDATE users SET last_tarot_read = :time WHERE user_id = :user_id',
                    {'user_id': user_id, 'time': time.time()})
    except Exception as e:
        print(e)
    conn.commit()
    cur.close()
    conn.close()


def check_last_affirmation(user_id):
    conn = sqlite3.connect('mysticism.db')
    cur = conn.cursor()
    try:
        cur.execute('SELECT * FROM users WHERE user_id=:user_id', {'user_id': user_id})
        user = cur.fetchone()
        if (user[1] is None):
            return True
    except Exception as e:
        print(e)
    conn.commit()
    cur.close()
    conn.close()

    # Adding restriction for daily affirmation at 6AM
    # Checking whether current date and last affirmation dates are the same
    if (datetime.datetime.fromtimestamp(user[1]).date() == datetime.date.today()):
        if (datetime.datetime.now().hour >= 6):
            if (datetime.datetime.fromtimestamp(user[1]).time().hour < 6):
                return True
            else:
                return False
        else:
            return False
    # Checking whether last affirmation was done the day before
    elif (datetime.datetime.fromtimestamp(user[1]).date() == datetime.date.today() - datetime.timedelta(days=1)):
        if (datetime.datetime.now().hour < 6):
            if (datetime.datetime.fromtimestamp(user[1]).time().hour < 6):
                return True
            else:
                return False
        else:
            return True
    else:
        return True


def check_last_tarot_read(user_id):
    conn = sqlite3.connect('mysticism.db')
    cur = conn.cursor()
    try:
        cur.execute('SELECT * FROM users WHERE user_id=:user_id', {'user_id': user_id})
        user = cur.fetchone()
        if(user[3] is None):
            return True
    except Exception as e:
        print(e)
    conn.commit()
    cur.close()
    conn.close()

    # Adding restriction for daily affirmation at 6AM
    # Checking whether current date and last affirmation dates are the same
    if (datetime.datetime.fromtimestamp(user[3]).date() == datetime.date.today()):
        if (datetime.datetime.now().hour >= 6):
            if (datetime.datetime.fromtimestamp(user[3]).time().hour < 6):
                return True
            else:
                return False
        else:
            return False
    # Checking whether last affirmation was done the day before
    elif (datetime.datetime.fromtimestamp(user[3]).date() == datetime.date.today() - datetime.timedelta(days=1)):
        if (datetime.datetime.now().hour < 6):
            if (datetime.datetime.fromtimestamp(user[3]).time().hour < 6):
                return True
            else:
                return False
        else:
            return True
    else:
        return True


def horoscope(sign, message):
    f = open('db.json', encoding="utf8")
    file = open('./img/zodiac.jpg', 'rb')
    data = json.load(f)

    markup = types.InlineKeyboardMarkup()
    btn_tarot = types.InlineKeyboardButton('–ö–∞—Ä—Ç–∞ –¥–Ω—è', callback_data='Card')
    btn_horoscope = types.InlineKeyboardButton('–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ 2024', callback_data='ZodiacSelection')
    btn_affirmation = types.InlineKeyboardButton('–ê—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è –¥–Ω—è', callback_data='Affirmation')
    markup.row(btn_affirmation, btn_tarot)
    markup.row(btn_horoscope)

    text = data['Zodiac'][sign]

    bot.send_photo(message.chat.id, file)
    bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode='HTML')
    f.close()
    file.close()


bot.polling(none_stop=True)
